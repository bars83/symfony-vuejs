---
image: docker:latest
#
#services:
#  - docker:dind
#
#variables:
#  DOCKER_DRIVER: overlay2
#  DOCKER_HOST: tcp://localhost:2375

stages:
  - base
  - artifacts
  - containerize
  - test
  - review
  - cleanup
  - staging
  - production
assets:
  stage: artifacts
  image:
    name: node:8
  cache:
    key: "${CI_COMMIT_REF_SLUG}-node-modules"
    paths:
      - node_modules/
  artifacts:
    paths:
      - public/build
    expire_in: 3 day
  script:
    - yarn install --network-timeout 100000
    - yarn build


build-php-base:
  stage: base
  image: docker:latest
#  services:
#    - name: docker:18.09.7-dind
#      command: ["--mtu=1300"]
  script:
#    - setup_docker
#    - docker info
#    - docker images
    - echo "Logging to GitLab Container Registry with CI credentials..."
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/php-base:$CI_COMMIT_REF_SLUG --build-arg BUILD_TIME="$(date "+%Y-%m-%d %H:%M:%S")" ./docker/php-base
    - docker push $CI_REGISTRY_IMAGE/php-base:$CI_COMMIT_REF_SLUG

vendors:
  stage: artifacts
  image: $CI_REGISTRY_IMAGE/php-base:$CI_COMMIT_REF_SLUG
#  services:
#    - name: docker:18.09.7-dind
#      command: ["--mtu=1300"]
  variables:
    DOCKER_DRIVER: overlay
    APP_ENV: "prod"
    APP_SECRET: "8d2a5c935d8ef1c0e2b751147382bc75"
    DATABASE_URL: 'pgsql://test:test@db:5432/test'
  before_script:
    - mkdir -p $(pwd)/.composer-cache
    - composer config -g cache-dir "$(pwd)/.composer-cache"
  cache:
    key: "${CI_COMMIT_REF_SLUG}-vendor"
    paths:
      - vendor/
      - .composer-cache/
  artifacts:
    paths:
      - vendor
      - var
    expire_in: 1 hour
  script:
    - composer install --verbose --ignore-platform-reqs --optimize-autoloader --no-ansi --no-interaction --no-progress
    - php bin/console cache:clear --env=prod
containerize:
  image: docker:latest
#  services:
#    - name: docker:18.09.7-dind
#      command: ["--mtu=1300"]
#  variables:
#    DOCKER_DRIVER: overlay
  stage: containerize
  only:
    - never
  script:
#    - setup_docker
#    - docker info
#    - docker images
    - echo "Logging to GitLab Container Registry with CI credentials..."
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE/php:$CI_COMMIT_REF_SLUG --build-arg BUILD_TIME="$(date "+%Y-%m-%d %H:%M:%S")" --build-arg CI_REGISTRY_IMAGE=$CI_REGISTRY_IMAGE --build-arg CI_COMMIT_REF_SLUG=$CI_COMMIT_REF_SLUG -f ./docker/php/Dockerfile .
    - rm -rf ./vendor
    - rm -rf ./node_modules
    - docker build -t $CI_REGISTRY_IMAGE/web:$CI_COMMIT_REF_SLUG --build-arg CI_COMMIT_REF_SLUG=$CI_COMMIT_REF_SLUG -f ./docker/nginx/Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/php:$CI_COMMIT_REF_SLUG
    - docker push $CI_REGISTRY_IMAGE/web:$CI_COMMIT_REF_SLUG

test:
  stage: test
  script:
    - exit 0
  only:
    - branches

review:
  stage: review
  variables:
    KUBE_NAMESPACE: review
    INGRESS_HOST: $CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG.$KUBE_INGRESS_BASE_DOMAIN
    name: $CI_ENVIRONMENT_SLUG
  environment:
    name: review/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME
    url: https://$CI_PROJECT_NAME-$CI_COMMIT_REF_SLUG.$KUBE_INGRESS_BASE_DOMAIN
    on_stop: stop_review
  only:
    refs:
      - branches
    kubernetes: active
  except:
    - master
  script:
    - install_dependencies
    - ensure_namespace
    - install_tiller
    - create_secret
    - deploy


staging:
  stage: staging
  script:
    - install_dependencies
    - ensure_namespace
    - install_tiller
    - create_secret
    - deploy
  variables:
    KUBE_NAMESPACE: symvue-staging
    INGRESS_HOST: $CI_PROJECT_PATH_SLUG-staging.$KUBE_INGRESS_BASE_DOMAIN
    name: symvue-staging
  environment:
    name: staging
    url: https://$CI_PROJECT_PATH_SLUG-staging.$KUBE_INGRESS_BASE_DOMAIN
  only:
    refs:
      - master
    kubernetes: active

production:
  stage: production
  script:
    - install_dependencies
    - ensure_namespace
    - install_tiller
    - create_secret
    - deploy
  variables:
    KUBE_NAMESPACE: symvue-production
    INGRESS_HOST: $CI_PROJECT_PATH_SLUG.$KUBE_INGRESS_BASE_DOMAIN
    name: symvue-production
  environment:
    name: production
    url: https://$CI_PROJECT_PATH_SLUG.$KUBE_INGRESS_BASE_DOMAIN
  when: manual
  only:
    refs:
      - master
    kubernetes: active

stop_review:
  stage: cleanup
  variables:
    GIT_STRATEGY: none
    name: $CI_ENVIRONMENT_SLUG
  environment:
    name: review/$CI_PROJECT_PATH/$CI_COMMIT_REF_NAME
    action: stop
  when: manual
  allow_failure: true
  only:
    refs:
      - branches
    kubernetes: active
  except:
    - master
  before_script:
    # installing dependencies
    - apk add -U openssl curl tar gzip bash ca-certificates git
    - wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
    - wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.23-r3/glibc-2.23-r3.apk
    - apk add glibc-2.23-r3.apk
    - curl https://storage.googleapis.com/pub/gsutil.tar.gz | tar -xz -C $HOME
    - export PATH=${PATH}:$HOME/gsutil
    - curl https://kubernetes-helm.storage.googleapis.com/helm-v2.14.3-linux-amd64.tar.gz | tar zx
    - mv linux-amd64/helm /usr/bin/
    - helm version --client
    - curl  -o /usr/bin/sync-repo.sh https://raw.githubusercontent.com/kubernetes/helm/master/scripts/sync-repo.sh
    - chmod a+x /usr/bin/sync-repo.sh
    - curl -L -o /usr/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x /usr/bin/kubectl
    - kubectl version --client
  script:
    - helm delete "$name" --purge

.auto_devops: &auto_devops |
  [[ "$TRACE" ]] && set -x
  export CI_APPLICATION_REPOSITORY=$CI_REGISTRY/$CI_PROJECT_PATH
  export CI_APPLICATION_TAG=$CI_COMMIT_REF_SLUG
  export CI_CONTAINER_NAME=ci_job_build_${CI_JOB_ID}
  export TILLER_NAMESPACE="kube-system"


  function deploy() {
      echo $KUBE_NAMESPACE
      track="${1-stable}"

      if [[ "$CI_PROJECT_VISIBILITY" != "public" ]]; then
        secret_name='gitlab-registry'
      else
        secret_name=''
      fi


      echo $INGRESS_HOST
      echo $CI_SERVER_HOST/$CI_PROJECT_NAMESPACE
      echo $CI_REGISTRY/$CI_PROJECT_NAMESPACE
      echo $secret_name
      echo $KUBE_NAMESPACE
      echo $CI_PIPELINE_ID-$CI_JOB_ID

      echo "Deploy helm release $name to $KUBE_NAMESPACE"
      echo "Upgrading existing release..."

      helm upgrade --install \
        --wait \
        --set ingress.host="$INGRESS_HOST" \
        --set image.secret="$secret_name" \
        --set web.image="$CI_REGISTRY_IMAGE/web" \
        --set web.tag="$CI_COMMIT_REF_SLUG" \
        --set php.image="$CI_REGISTRY_IMAGE/php" \
        --set php.tag="$CI_COMMIT_REF_SLUG" \
        --namespace="$KUBE_NAMESPACE" \
        "$name" \
        ./helm/symvue

  }


  function setup_docker() {
      if ! docker info &>/dev/null; then
        if [ -z "$DOCKER_HOST" -a "$KUBERNETES_PORT" ]; then
          export DOCKER_HOST='tcp://localhost:2375'
        fi
      fi
    }

  function build() {

    echo "Building Dockerfile-based application..."
    echo `git show --format="%h" HEAD | head -1` > build_info.txt
    echo `git rev-parse --abbrev-ref HEAD` >> build_info.txt
    cat build_info.txt
    docker build -t "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" .

    docker build -t $CI_REGISTRY_IMAGE/php-base --build-arg BUILD_TIME="$(date "+%Y-%m-%d %H:%M:%S")" ./docker/php-base
    docker push $CI_REGISTRY_IMAGE/php-base

    if [[ -n "$CI_REGISTRY_USER" ]]; then
      echo "Logging to GitLab Container Registry with CI credentials..."
      docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
      echo ""
    fi

    echo "Pushing to GitLab Container Registry..."
    docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
    echo ""
  }

  function install_dependencies() {

      apk add -U openssl curl tar gzip bash ca-certificates git
      wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub
      wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.23-r3/glibc-2.23-r3.apk
      apk add glibc-2.23-r3.apk
      rm glibc-2.23-r3.apk

      curl https://kubernetes-helm.storage.googleapis.com/helm-v2.14.3-linux-amd64.tar.gz | tar zx

      mv linux-amd64/helm /usr/bin/
      helm version --client

      curl -L -o /usr/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
      chmod +x /usr/bin/kubectl
      kubectl version --client
  }

  function ensure_namespace() {
      # kubectl cluster-info
      kubectl describe namespace "$KUBE_NAMESPACE" || kubectl create namespace "$KUBE_NAMESPACE"
  }

  function install_tiller() {
      echo "Checking Tiller..."
      helm init --upgrade
      kubectl rollout status -n "$TILLER_NAMESPACE" -w "deployment/tiller-deploy"
      if ! helm version --debug; then
        echo "Failed to init Tiller."
        return 1
      fi
      echo ""
  }

  function create_secret() {
    echo "Create secret..."
    if [[ "$CI_PROJECT_VISIBILITY" == "public" ]]; then
      return
    fi

    kubectl create secret -n "$KUBE_NAMESPACE" \
      docker-registry gitlab-registry \
      --docker-server="$CI_REGISTRY" \
      --docker-username="${CI_DEPLOY_USER:-$CI_REGISTRY_USER}" \
      --docker-password="${CI_DEPLOY_PASSWORD:-$CI_REGISTRY_PASSWORD}" \
      --docker-email="$GITLAB_USER_EMAIL" \
      -o yaml --dry-run | kubectl replace -n "$KUBE_NAMESPACE" --force -f -
  }

  function delete() {
      name="$CI_ENVIRONMENT_SLUG"
      helm delete "$name" || true
  }


before_script:
  - *auto_devops
